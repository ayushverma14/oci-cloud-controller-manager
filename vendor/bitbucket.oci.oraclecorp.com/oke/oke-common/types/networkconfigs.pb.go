// Code generated by protoc-gen-go. DO NOT EDIT.
// source: networkconfigs.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type NetworkConfig struct {
	VCNID            string   `protobuf:"bytes,1,opt,name=VCNID" json:"VCNID,omitempty"`
	ServiceLBSubnets []string `protobuf:"bytes,2,rep,name=ServiceLBSubnets" json:"ServiceLBSubnets,omitempty"`
	K8SPodsCIDR      string   `protobuf:"bytes,3,opt,name=K8SPodsCIDR" json:"K8SPodsCIDR,omitempty"`
	K8SServicesCIDR  string   `protobuf:"bytes,4,opt,name=K8SServicesCIDR" json:"K8SServicesCIDR,omitempty"`
	K8SDNSClusterIP  string   `protobuf:"bytes,5,opt,name=K8SDNSClusterIP" json:"K8SDNSClusterIP,omitempty"`
}

func (m *NetworkConfig) Reset()                    { *m = NetworkConfig{} }
func (m *NetworkConfig) String() string            { return proto.CompactTextString(m) }
func (*NetworkConfig) ProtoMessage()               {}
func (*NetworkConfig) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *NetworkConfig) GetVCNID() string {
	if m != nil {
		return m.VCNID
	}
	return ""
}

func (m *NetworkConfig) GetServiceLBSubnets() []string {
	if m != nil {
		return m.ServiceLBSubnets
	}
	return nil
}

func (m *NetworkConfig) GetK8SPodsCIDR() string {
	if m != nil {
		return m.K8SPodsCIDR
	}
	return ""
}

func (m *NetworkConfig) GetK8SServicesCIDR() string {
	if m != nil {
		return m.K8SServicesCIDR
	}
	return ""
}

func (m *NetworkConfig) GetK8SDNSClusterIP() string {
	if m != nil {
		return m.K8SDNSClusterIP
	}
	return ""
}

func init() {
	proto.RegisterType((*NetworkConfig)(nil), "types.NetworkConfig")
}

func init() { proto.RegisterFile("networkconfigs.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc9, 0x4b, 0x2d, 0x29,
	0xcf, 0x2f, 0xca, 0x4e, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0x2f, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x62, 0x2d, 0xa9, 0x2c, 0x48, 0x2d, 0x56, 0x3a, 0xce, 0xc8, 0xc5, 0xeb, 0x07, 0x91, 0x77,
	0x06, 0xcb, 0x0b, 0x89, 0x70, 0xb1, 0x86, 0x39, 0xfb, 0x79, 0xba, 0x48, 0x30, 0x2a, 0x30, 0x6a,
	0x70, 0x06, 0x41, 0x38, 0x42, 0x5a, 0x5c, 0x02, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x3e,
	0x4e, 0xc1, 0xa5, 0x49, 0x79, 0xa9, 0x25, 0xc5, 0x12, 0x4c, 0x0a, 0xcc, 0x1a, 0x9c, 0x41, 0x18,
	0xe2, 0x42, 0x0a, 0x5c, 0xdc, 0xde, 0x16, 0xc1, 0x01, 0xf9, 0x29, 0xc5, 0xce, 0x9e, 0x2e, 0x41,
	0x12, 0xcc, 0x60, 0x73, 0x90, 0x85, 0x84, 0x34, 0xb8, 0xf8, 0xbd, 0x2d, 0x82, 0xa1, 0x1a, 0x21,
	0xaa, 0x58, 0xc0, 0xaa, 0xd0, 0x85, 0xa1, 0x2a, 0x5d, 0xfc, 0x82, 0x9d, 0x73, 0x4a, 0x8b, 0x4b,
	0x52, 0x8b, 0x3c, 0x03, 0x24, 0x58, 0xe1, 0x2a, 0x91, 0x85, 0x9d, 0x8c, 0xa3, 0x0c, 0x93, 0x32,
	0x4b, 0x92, 0x4a, 0x93, 0xb3, 0x53, 0x4b, 0xf4, 0xf2, 0x93, 0x33, 0xf5, 0xf2, 0x8b, 0x12, 0x93,
	0x73, 0x52, 0x93, 0xf3, 0x8b, 0x0a, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xf3, 0xb3, 0x53, 0x41, 0x58,
	0x37, 0x39, 0x3f, 0x37, 0x37, 0x3f, 0x4f, 0x1f, 0xec, 0xfd, 0x24, 0x36, 0x70, 0x60, 0x18, 0x03,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x0b, 0x5b, 0x7f, 0x24, 0x01, 0x00, 0x00,
}
